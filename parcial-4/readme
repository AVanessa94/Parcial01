# 📘 Informe – Ejercicios del Parcial 1  

---

## 🔹 Ejercicio 1 – `invertir_lista` y `estructural.py`  

### ⚠️ Problema detectado  
El código original en la función `invertir_lista` estaba escrito de esta forma:  

```python
print(invertir_lista([1,2,3,4,5])
Aquí faltaba un paréntesis de cierre.
El intérprete detecta que se abre una instrucción pero nunca se cierra, lo que genera un error de sintaxis e impide que el programa pueda ejecutarse.

✅ Corrección aplicada
Se añadió el paréntesis faltante:

python
Copiar código
print(invertir_lista([1,2,3,4,5]))
Con esta corrección, el programa se ejecuta correctamente y devuelve el resultado esperado.

📝 Explicación del ejercicio estructurado
En el archivo estructural.py se planteó un ejercicio con el objetivo de:

Sumar todos los números de la lista.

Encontrar el número máximo.

En caso de que la lista esté vacía, retornar la tupla (0, None).

📌 Funcionamiento paso a paso:

Se inicializa suma = 0 y maximo = lista[0].

Se recorre la lista elemento por elemento.

En cada iteración, el valor se acumula en suma.

Si el número actual es mayor que el valor almacenado en maximo, este se actualiza.

Finalmente, se retorna la tupla (suma, maximo) y se imprimen los resultados.

💡 Este ejercicio demuestra cómo aplicar estructuras de control básicas para resolver un problema de acumulación y comparación en listas.

🔹 Ejercicio 2 – Programación Orientada a Objetos
🏦 Clase CuentaBancaria
Se creó una clase que simula el manejo de una cuenta bancaria con las siguientes características:

Atributos: titular y saldo.

Método retirar: permite realizar un retiro solo si la cantidad es positiva y no supera el saldo disponible.

📌 Comportamiento:

Si la cantidad es menor o igual a cero, se muestra un mensaje de error.

Si la cantidad es válida y el saldo suficiente, se descuenta y se muestra el nuevo saldo.

En caso contrario, se notifica que no hay fondos suficientes.

De esta forma se simula el flujo de un retiro bancario.

✅ Clase Confirmacion
También se diseñó una clase llamada Confirmacion, orientada a validar compras según el saldo disponible del cliente.

📌 Comportamiento:

El método confirmacion_compra recibe: titular, saldo y valor de la compra.

Si la compra no supera el saldo, se imprime un mensaje de confirmación y retorna True.

Si la compra excede el saldo, se informa el monto disponible y retorna False.

De esta manera, se refuerza el concepto de validación de operaciones en POO, mostrando un ejemplo aplicable a un sistema de compras real.

✨ Conclusión General
Los ejercicios permitieron:

Identificar y corregir errores de sintaxis.

Implementar operaciones con estructuras de control básicas.

Aplicar programación orientada a objetos en escenarios prácticos como operaciones bancarias y validación de compras.

Esto garantiza un aprendizaje integral de los paradigmas de programación estructurada y orientada a objetos.
