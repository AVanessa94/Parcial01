# 📘 **Informe de Ejercicios – Parcial**

---

## 🔹 **Ejercicio 1 – `invertir_lista` y `estructural.py`**

### ⚠️ **Problema detectado**
El código original en la función `invertir_lista` estaba escrito así:  

```python
print(invertir_lista([1,2,3,4,5])
❌ Aquí faltaba un paréntesis de cierre.
El intérprete detecta que se abre una instrucción pero nunca se cierra, lo que genera un error de sintaxis e impide ejecutar el programa.

✅ Corrección aplicada
Se añadió el paréntesis faltante:

python
Copiar código
print(invertir_lista([1,2,3,4,5]))
Con esta corrección, el programa se ejecuta correctamente y devuelve el resultado esperado.

📝 Explicación del ejercicio estructurado
En el archivo estructural.py se planteó un ejercicio con el objetivo de:

🔢 Sumar todos los números de la lista

🔎 Encontrar el número máximo

🛑 Si la lista está vacía → retornar (0, None)

📌 Funcionamiento paso a paso:

Se inicializa suma = 0 y maximo = lista[0].

Se recorre la lista elemento por elemento.

En cada iteración:

Se acumula el valor en suma.

Si el número actual > maximo, se actualiza.

Se retorna (suma, maximo) y se imprime.

💡 Conclusión: Este ejercicio demuestra cómo aplicar estructuras de control básicas para resolver un problema de acumulación y comparación.

🔹 Ejercicio 2 – Programación Orientada a Objetos
🏦 Clase CuentaBancaria
Se creó una clase que simula el manejo de una cuenta bancaria.

Características principales:

📌 Atributos: titular y saldo

📌 Método retirar: valida y descuenta dinero del saldo

🔎 Comportamiento:

❌ Si la cantidad ≤ 0 → error

✅ Si la cantidad ≤ saldo → se descuenta y muestra el nuevo saldo

⚠️ Si la cantidad > saldo → “Fondos insuficientes”

De esta forma se simula el flujo de un retiro bancario.

🛒 Clase Confirmacion
Clase encargada de validar compras según el saldo disponible.

Funcionamiento:

✅ Si la compra ≤ saldo → confirma la compra y retorna True.

❌ Si la compra > saldo → informa saldo insuficiente y retorna False.

✨ Conclusión General
Estos ejercicios permitieron:

🔧 Identificar y corregir errores de sintaxis

📊 Aplicar estructuras de control básicas en listas

🏗️ Implementar POO en escenarios prácticos como retiros bancarios y validación de compras

➡️ En conjunto, refuerzan los paradigmas estructurado y orientado a objetos, mostrando su aplicación en problemas reales.

markdown
Copiar código

